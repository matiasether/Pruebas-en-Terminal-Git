Archivo de registro fecha 30-12-22

Git FETCH trae los cambios del repositorio remoto al repositorio local, pero no los aplica de inmediato.
 En lugar de ello, descarga los cambios en una nueva rama temporal,
  lo que te permite revisar los cambios antes de aplicarlos a tu rama actual.

Git PULL es una combinación de git fetch y git merge. 
    Descarga los cambios del repositorio remoto y luego los aplica a tu rama actual de forma automática.

Git MERGE fusiona los cambios de una rama con otra. Para poder hacerlo, 
    primero debes tener los cambios en tu repositorio local, 
        lo que puedes hacer con git fetch o git pull. 
    Una vez que tienes los cambios en tu repositorio local, 
        puedes usar git merge para aplicarlos a tu rama actual.



Git BRANCH permite crear una nueva rama a partir de la rama actual. 
    Esto es útil para crear una nueva versión de un proyecto sin afectar la rama principal.

Git CHECKOUT te permite moverte entre ramas o versiones del proyecto.
 Si especificas el nombre de una rama, te llevará a esa rama.
 Si especificas una etiqueta de versión o un commit específico,
 te llevará a esa versión del proyecto.

HEAD es el último commit de la rama actual. Si realizas un commit en la rama, 
    HEAD se actualizará para apuntar al nuevo commit.

FORK: 
Es una característica única de GitHub en la que se crea una copia exacta del estado actual de un repositorio directamente en GitHub, 
éste repositorio podrá servir como otro origen y se podrá clonar (como cualquier otro repositorio), en pocas palabras, 
lo podremos utilizar como un git cualquiera
.
Un fork es como una bifurcación del repositorio completo, tiene una historia en común, 
pero de repente se bifurca y pueden variar los cambios, ya que ambos proyectos podrán ser modificados en paralelo 
y para estar al día un colaborador tendrá que estar actualizando su fork con la información del original.
.
Al hacer un fork de un poryecto en GitHub, te conviertes en dueñ@ del repositorio fork, puedes trabajar en éste con todos los permisos,
 pero es un repositorio completamente diferente que el original, teniendo alguna historia en común.
.
Los forks son importantes porque es la manera en la que funciona el open source, ya que,
 una persona puede no ser colaborador de un proyecto, pero puede contribuír al mismo, haciendo mejor software que pueda ser utilizado por cualquiera.
.
Al hacer un fork, GitHub sabe que se hizo el fork del proyecto, por lo que se le permite al colaborador hacer pull request desde su repositorio propio.

Trabajando con más de 1 repositorio remoto
Cuando trabajas en un proyecto que existe en diferentes repositorios remotos (normalmente a causa de un fork) 
es muy probable que desees poder trabajar con ambos repositorios, para ésto puedes crear un remoto adicional desde consola.

git remote add <nombre_del_remoto> <url_del_remoto> 
git remote upstream https://github.com/freddier/hyperblog
Al crear un remoto adicional podremos, hacer pull desde el nuevo origen (en caso de tener permisos podremos hacer fetch y push)

git pull <remoto> <rama>
git pull upstream master
Éste pull nos traerá los cambios del remoto, por lo que se estará al día en el proyecto, el flujo de trabajo cambia,
 en adelante se estará trabajando haciendo pull desde el upstream y push al origin para pasar a hacer pull request.

git pull upstream master
git push origin master